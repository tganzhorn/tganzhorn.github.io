{"version":3,"sources":["CommandParser.ts","DebugCommands.tsx","LCD.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LCDCommand","type","timestamp","this","Date","CommandParser","currentCommand","Uint8Array","newCommand","commandBuffer","debugNumberModes","debugTextModes","_onNewCommand","buffer","i","length","push","command","parseCommand","handle","row","column","DisplaySetCursorCommand","text","String","fromCharCode","DisplayCharCommand","DisplayPrintMulColumnCommand","mode","DisplayTextCommand","DisplayClearCommand","number","DebugNumberCommand","DebugTextCommand","console","log","DebugCommands","commands","clear","style","flex","backgroundColor","height","overflowY","Table","striped","bordered","hover","size","variant","colSpan","map","index","isDebugTextCommand","isDebugNumberCommand","padding","Button","onClick","DebugText","color","icon","toLocaleTimeString","fillZeroes","string","tmp","DebugNumber","fontFamily","toString","printNumber","LCDBuffer","rows","columns","lines","cursorRow","cursorColumn","commandsReceived","Array","fill","repeat","line","Math","min","substring","insertTextAt","LCD","forwardRef","props","ref","useState","setSize","setBuffer","fontSize","setFontSize","lightRef","useRef","useImperativeHandle","useEffect","current","boxShadow","raf","window","setTimeout","clearTimeout","display","alignItems","justifyContent","marginBottom","transition","marginLeft","borderRadius","width","htmlFor","paddingRight","id","onChange","event","x","target","value","split","v","parseInt","className","border","position","right","max","getLines","lineHeight","letterSpacing","whiteSpace","App","serial","setSerial","serialPort","setSerialPort","debugCommands","setDebugCommands","connected","setConnected","lcdRef","readerRef","writerRef","navigator","openSerialPort","handleCOMPortSelection","a","requestPort","deviceInfo","getInfo","usbProductId","usbVendorId","alert","open","baudRate","parity","stopBits","dataBits","flowControl","readable","writable","commandParser","getReader","reader","getWriter","writer","onNewCommand","state","concat","insertText","setCursor","clearLines","ack","read","done","releaseLock","parseValue","write","flexDirection","Navbar","bg","expand","Container","Brand","Jumbotron","fluid","undefined","Modal","show","backdrop","Header","Title","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e11317af.chunk.js","sourcesContent":["class LCDCommand {\r\n    type: CommandTypes;\r\n    timestamp: Date;\r\n\r\n    constructor(type: CommandTypes) {\r\n        this.type = type;\r\n        this.timestamp = new Date();\r\n    }\r\n}\r\n\r\nexport type CommandTypes = \"DisplaySetCursorCommand\" | \"DisplayTextCommand\" | \"DisplayCharCommand\" |\r\n    \"DisplayClearCommand\" | \"DebugNumberCommand\" | \"DebugTextCommand\" | \"DisplayPrintColumnCommand\";\r\n\r\nexport class CommandParser {\r\n    currentCommand: Uint8Array = new Uint8Array(0);\r\n    newCommand: boolean = false;\r\n    commandBuffer: number[] = [];\r\n    debugNumberModes: string[] = [\"u8hex\", \"u16hex\", \"u32hex\", \"u8dez\", \"u16dez\", \"u8bin\", \"u16bin\", \"u32bin\"];\r\n    debugTextModes: string[] = [\"text\", \"error\", \"ok\"];\r\n    _onNewCommand: (command: LCDCommand) => void = () => { };\r\n\r\n    parseValue(buffer: Uint8Array) {\r\n        for (let i = 0; i < buffer.length; i++) {\r\n            if (buffer[i] === 35) {\r\n                this.newCommand = true;\r\n                if (this.commandBuffer.length !== 0)  {\r\n                    const command = this.parseCommand();\r\n                    if (command) this._onNewCommand(command);\r\n                }\r\n                this.commandBuffer.length = 0;\r\n                continue;\r\n            }\r\n            if (this.newCommand) {\r\n                if (this.commandBuffer[2]) {\r\n                    if (this.commandBuffer.length === this.commandBuffer[2] + 2) {\r\n                        this.commandBuffer.push(buffer[i]);\r\n                        const command = this.parseCommand();\r\n                        if (command) this._onNewCommand(command);\r\n                        this.commandBuffer.length = 0;\r\n                        this.newCommand = false;\r\n                        continue;\r\n                    }\r\n                }\r\n                this.commandBuffer.push(buffer[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    set onNewCommand(handle: (command: LCDCommand) => void) {\r\n        this._onNewCommand = handle;\r\n    }\r\n\r\n    parseCommand(): LCDCommand | false {\r\n        // Display Commands\r\n        if (this.commandBuffer[0] === 76) {\r\n            if (this.commandBuffer[1] === 2) { // set row, column\r\n                const row = this.commandBuffer[3];\r\n                const column = this.commandBuffer[4];\r\n\r\n                return new DisplaySetCursorCommand(row, column);\r\n            }\r\n            if (this.commandBuffer[1] === 3) { // set row\r\n                const row = this.commandBuffer[3];\r\n\r\n                return new DisplaySetCursorCommand(row, null);\r\n            }\r\n            if (this.commandBuffer[1] === 4) { // set column\r\n                const column = this.commandBuffer[3];\r\n\r\n                return new DisplaySetCursorCommand(null, column);\r\n            }\r\n            if (this.commandBuffer[1] === 5) { // print column\r\n                let text = String.fromCharCode(this.commandBuffer[3]);\r\n\r\n                return new DisplayCharCommand(text, 1, \"normal\");\r\n            }\r\n            if (this.commandBuffer[1] === 6) { // print mulcolumn\r\n                const row = this.commandBuffer[3];\r\n                const column = this.commandBuffer[4];\r\n\r\n                let text = \"\";\r\n                for (let i = 5; i < this.commandBuffer.length; i++) {\r\n                    text += String.fromCharCode(this.commandBuffer[i]);\r\n                }\r\n\r\n                return new DisplayPrintMulColumnCommand(text, row, column);\r\n            }\r\n            if (this.commandBuffer[1] === 7 || this.commandBuffer[1] === 8) { // text\r\n                const mode = this.commandBuffer[1] === 7 ? \"normal\" : \"inverse\";\r\n                const length = this.commandBuffer[2];\r\n                const row = this.commandBuffer[3];\r\n                const column = this.commandBuffer[4];\r\n\r\n                let text = \"\";\r\n                for (let i = 5; i < this.commandBuffer.length; i++) {\r\n                    text += String.fromCharCode(this.commandBuffer[i]);\r\n                }\r\n\r\n                return new DisplayTextCommand(text, row, column, length, mode);\r\n            }\r\n            if (this.commandBuffer[1] === 9 || this.commandBuffer[1] === 10) { // char\r\n                const mode = this.commandBuffer[1] === 9 ? \"normal\" : \"invers\";\r\n                const length = 1;\r\n                const text = String.fromCharCode(this.commandBuffer[3]);\r\n\r\n                //@ts-ignore\r\n                return new DisplayCharCommand(text, length, mode);\r\n            }\r\n            if (this.commandBuffer[1] === 12) { // print line\r\n                return false;\r\n            }\r\n            if (this.commandBuffer[1] === 13) { // clear row\r\n                return false;\r\n            }\r\n            if (this.commandBuffer[1] === 14) { // clear lcd\r\n                return new DisplayClearCommand();\r\n            }\r\n        }\r\n        // Debug commands\r\n        if (this.commandBuffer[0] === 68) {\r\n            if (this.commandBuffer[1] === 2) {\r\n                const length = this.commandBuffer[2];\r\n                const mode = this.debugNumberModes[this.commandBuffer[3] - 1];\r\n                const number = (\r\n                    this.commandBuffer[4] * 2 ** 0 +\r\n                    this.commandBuffer[5] * 2 ** 1 +\r\n                    this.commandBuffer[6] * 2 ** 2 +\r\n                    this.commandBuffer[7] * 2 ** 3\r\n                );\r\n\r\n                let text = \"\";\r\n                for (let i = 8; i < this.commandBuffer.length; i++) {\r\n                    if (this.commandBuffer[i] === 0) break;\r\n                    text += String.fromCharCode(this.commandBuffer[i]);\r\n                }\r\n\r\n                //@ts-ignore\r\n                return new DebugNumberCommand(text, length, number, mode);\r\n            }\r\n            if (this.commandBuffer[1] === 1) {\r\n                const length = this.commandBuffer[2];\r\n                const mode = this.debugTextModes[this.commandBuffer[3] - 1];\r\n\r\n                let text = \"\";\r\n                for (let i = 4; i < this.commandBuffer.length; i++) {\r\n                    text += String.fromCharCode(this.commandBuffer[i]);\r\n                }\r\n\r\n                //@ts-ignore\r\n                return new DebugTextCommand(text, length, mode);\r\n            }\r\n        }\r\n        console.log(this.commandBuffer);\r\n        return false;\r\n    }\r\n}\r\n\r\nexport type DisplayCommandModes = \"normal\" | \"inverse\";\r\n\r\nexport class DisplayTextCommand extends LCDCommand {\r\n    mode: DisplayCommandModes;\r\n    length: number;\r\n    row: number;\r\n    column: number;\r\n    text: string;\r\n\r\n    constructor(text: string, row: number, column: number, length: number, mode: DisplayCommandModes) {\r\n        super(\"DisplayTextCommand\");\r\n        this.text = text;\r\n        this.row = row;\r\n        this.column = column;\r\n        this.length = length;\r\n        this.mode = mode;\r\n    }\r\n}\r\n\r\nexport class DisplayPrintMulColumnCommand extends LCDCommand {\r\n    row: number;\r\n    column: number;\r\n    text: string;\r\n\r\n    constructor(text: string, row: number, column: number) {\r\n        super(\"DisplayPrintColumnCommand\")\r\n        this.text = text;\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n\r\nexport class DisplaySetCursorCommand extends LCDCommand {\r\n    row: number | null;\r\n    column: number | null;\r\n\r\n    constructor(row: number | null, column: number | null) {\r\n        super(\"DisplaySetCursorCommand\");\r\n        this.row = row;\r\n        this.column = column;\r\n    }\r\n}\r\n\r\nexport class DisplayClearCommand extends LCDCommand {\r\n    constructor() {\r\n        super(\"DisplayClearCommand\");\r\n    }\r\n}\r\n\r\nexport class DisplayCharCommand extends LCDCommand {\r\n    mode: DisplayCommandModes;\r\n    length: number;\r\n    text: string;\r\n\r\n    constructor(text: string, length: number, mode: DisplayCommandModes) {\r\n        super(\"DisplayCharCommand\");\r\n        this.text = text;\r\n        this.length = length;\r\n        this.mode = mode;\r\n    }\r\n}\r\n\r\nexport type DebugTextModes = \"normal\" | \"error\" | \"ok\";\r\n\r\nexport class DebugTextCommand extends LCDCommand {\r\n    mode: DebugTextModes;\r\n    text: string;\r\n    length: number;\r\n\r\n    constructor(text: string, length: number, mode: DebugTextModes) {\r\n        super(\"DebugTextCommand\");\r\n        this.text = text;\r\n        this.length = length;\r\n        this.mode = mode;\r\n    }\r\n}\r\n\r\nexport const isDebugTextCommand = (command: LCDCommand): command is DebugTextCommand => {\r\n    return command.type === \"DebugTextCommand\";\r\n}\r\n\r\nexport type DebugNumberModes =\r\n    \"u8hex\" | \"u16hex\" | \"u32hex\" |\r\n    \"u8bin\" | \"u16bin\" | \"u32bin\" |\r\n    \"u8dez\" | \"u16dez\";\r\n\r\nexport class DebugNumberCommand extends LCDCommand {\r\n    length: number;\r\n    mode: DebugNumberModes;\r\n    text: string;\r\n    number: number;\r\n\r\n    constructor(text: string, length: number, number: number, mode: DebugNumberModes) {\r\n        super(\"DebugNumberCommand\");\r\n        this.length = length;\r\n        this.mode = mode;\r\n        this.text = text;\r\n        this.number = number;\r\n    }\r\n}\r\n\r\nexport const isDebugNumberCommand = (command: LCDCommand): command is DebugNumberCommand => {\r\n    return command.type === \"DebugNumberCommand\";\r\n}","import { FunctionComponent } from \"react\";\r\nimport { Button, Table } from \"react-bootstrap\";\r\nimport { DebugNumberCommand, DebugNumberModes, DebugTextCommand, isDebugNumberCommand, isDebugTextCommand } from \"./CommandParser\";\r\n\r\nexport const DebugCommands: FunctionComponent<{ commands: (DebugTextCommand | DebugNumberCommand)[], clear: () => {} }> = ({ commands, clear }) => {\r\n    return (\r\n        <div style={{flex: \"1 1 auto\", backgroundColor: \"#343a40\"}}>\r\n            <div style={{height: 300, overflowY: \"auto\"}}>\r\n                <Table striped bordered hover size=\"sm\" variant=\"dark\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Time</th>\r\n                            <th>Message</th>\r\n                            <th>Number</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            commands.length === 0 ? (\r\n                                <tr>\r\n                                    <td colSpan={3}>We did not receive any debug messages yet. 😢</td>\r\n                                </tr>\r\n                            ) : null\r\n                        }\r\n                        {\r\n                            commands.map((command, index) => {\r\n                                if (isDebugTextCommand(command)) {\r\n                                    return <DebugText key={index} command={command} />;\r\n                                }\r\n                                if (isDebugNumberCommand(command)) {\r\n                                    return <DebugNumber key={index} command={command} />;\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n            <div style={{padding: 8}}>\r\n                <Button onClick={clear}>Clear Log</Button>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst DebugText: FunctionComponent<{ command: DebugTextCommand }> = ({ command }) => {\r\n    const { timestamp, mode, text } = command;\r\n\r\n    let color = \"\";\r\n    let icon = \"\";\r\n    if (mode === \"error\") {\r\n        icon = \"❌ \";\r\n        color = \"lightred\";\r\n    }\r\n    if (mode === \"ok\") {\r\n        icon = \"✔ \";\r\n        color = \"lightgreen\";\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{timestamp.toLocaleTimeString()}</td>\r\n            <td style={{ color: color }} colSpan={2}>{icon + text}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nconst fillZeroes = (string: string, length: number) => {\r\n    if (string.length === length) return string;\r\n\r\n    let tmp = string;\r\n    for (let i = string.length; i < length; i++) {\r\n        tmp = \"0\" + tmp;\r\n    }   \r\n    return tmp;\r\n}\r\n\r\nconst DebugNumber: FunctionComponent<{ command: DebugNumberCommand }> = ({ command }) => {\r\n    const { timestamp, number, text, mode } = command;\r\n\r\n    const printNumber = (number: number, mode: DebugNumberModes) => {\r\n        if (mode === \"u8hex\") {\r\n            return `0x${fillZeroes(number.toString(16), 2)}`;\r\n        }\r\n        if (mode === \"u16hex\") {\r\n            return `0x${fillZeroes(number.toString(16), 4)}`;\r\n        }\r\n        if (mode === \"u32hex\") {\r\n            return `0x${fillZeroes(number.toString(16), 8)}`;\r\n        }\r\n        if (mode === \"u8bin\") {\r\n            return `0b${fillZeroes(number.toString(2), 8)}`;\r\n        }\r\n        if (mode === \"u16bin\") {\r\n            return `0b${fillZeroes(number.toString(2), 16)}`;\r\n        }\r\n        return number.toString();\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{timestamp.toLocaleTimeString()}</td>\r\n            <td>{text}</td>\r\n            <td style={{fontFamily: \"Roboto Mono\", color: \"lightblue\"}}>{printNumber(number, mode)}</td>\r\n        </tr>\r\n    )\r\n}","import { forwardRef, ForwardRefExoticComponent, useRef, useState, useImperativeHandle, useEffect } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nexport class LCDBuffer {\r\n    rows: number;\r\n    columns: number;\r\n    cursorRow: number;\r\n    cursorColumn: number;\r\n    commandsReceived: number;\r\n\r\n    lines: string[];\r\n\r\n    constructor(rows: number, columns: number, lines?: string[], cursorRow?: number, cursorColumn?: number, commandsReceived?: number) {\r\n        this.rows = rows;\r\n        this.columns = columns;\r\n\r\n        this.cursorColumn = cursorColumn ?? 0;\r\n        this.cursorRow = cursorRow ?? 0;\r\n\r\n        this.commandsReceived = commandsReceived ?? 0;\r\n\r\n        this.lines = lines ?? new Array(rows).fill(\" \".repeat(columns));\r\n    }\r\n\r\n    insertTextAt(text: string, row: number, column: number) {\r\n        if (row > this.rows - 1) return this;\r\n        const line = this.lines[row];\r\n        const length = Math.min(text.length + column, this.columns - column);\r\n        this.lines[row] = line.substring(0, column) + text.substring(0, length) + line.substring(column + length, line.length);\r\n        this.cursorRow = row;\r\n        this.cursorColumn = Math.min(column + text.length, this.columns - 1);\r\n\r\n        this.commandsReceived++;\r\n\r\n        return new LCDBuffer(this.rows, this.columns, this.lines, this.cursorRow, this.cursorColumn, this.commandsReceived);\r\n    }\r\n\r\n    insertText(text: string) {\r\n        this.insertTextAt(text, this.cursorRow, this.cursorColumn);\r\n\r\n        this.commandsReceived++;\r\n\r\n        return new LCDBuffer(this.rows, this.columns, this.lines, this.cursorRow, this.cursorColumn, this.commandsReceived);\r\n    }\r\n\r\n    setCursor(row: number | null, column: number | null) {\r\n        this.cursorRow = row ?? this.cursorRow;\r\n        this.cursorColumn = column ?? this.cursorColumn;\r\n\r\n        this.commandsReceived++;\r\n\r\n        return new LCDBuffer(this.rows, this.columns, this.lines, this.cursorRow, this.cursorColumn, this.commandsReceived);\r\n    }\r\n\r\n    clearLines() {\r\n        this.lines = new Array(this.rows).fill(\" \".repeat(this.columns));\r\n\r\n        this.commandsReceived++;\r\n\r\n        return new LCDBuffer(this.rows, this.columns, this.lines, this.cursorRow, this.cursorColumn, this.commandsReceived);\r\n    }\r\n\r\n    clearRow(row: number) {\r\n        this.lines[row] = \" \".repeat(this.columns);\r\n\r\n        this.commandsReceived++;\r\n\r\n        return new LCDBuffer(this.rows, this.columns, this.lines, this.cursorRow, this.cursorColumn, this.commandsReceived);\r\n    }\r\n\r\n    getLines() {\r\n        return this.lines;\r\n    }\r\n}\r\n\r\nexport const LCD: ForwardRefExoticComponent<{}> = forwardRef((props, ref) => {\r\n    const [size, setSize] = useState<[number, number]>([21, 8]);\r\n    const [buffer, setBuffer] = useState<LCDBuffer>(new LCDBuffer(size[1], size[0]));\r\n    const [fontSize, setFontSize] = useState<number>(32);\r\n    const lightRef = useRef<HTMLDivElement>(null);\r\n\r\n\r\n    useImperativeHandle(ref, () => ([buffer, setBuffer]));\r\n\r\n    useEffect(() => {\r\n        if (!lightRef.current) return;\r\n\r\n        if (buffer.commandsReceived === 0) return;\r\n\r\n        lightRef.current.style.backgroundColor = \"#5DFF00\";\r\n        lightRef.current.style.boxShadow = \"0 0 10px #5DFF00\";\r\n\r\n        const raf = window.setTimeout(() => {\r\n            if (!lightRef.current) return;\r\n            lightRef.current.style.backgroundColor = \"#aaa\";\r\n            lightRef.current.style.boxShadow = \"none\";\r\n        }, 300);\r\n\r\n        return () => {\r\n            window.clearTimeout(raf);\r\n        }\r\n    }, [buffer]);\r\n\r\n    useEffect(() => {\r\n        setBuffer(new LCDBuffer(size[1], size[0]));\r\n    }, [size]);\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", alignItems: \"flex-start\", justifyContent: \"space-between\", backgroundColor: \"#343a40\", padding: 8, color: \"white\" }}>\r\n            <div>\r\n                <div style={{ display: \"flex\", alignItems: \"center\", marginBottom: 16 }}>\r\n                    <span>RX:</span>\r\n                    <div ref={lightRef} style={{ transition: \"all 0.1s ease\", marginLeft: 16, backgroundColor: \"#aaa\", borderRadius: \"50%\", width: 32, height: 32 }}></div>\r\n                </div>\r\n                <div style={{ display: \"flex\", alignItems: \"center\", marginBottom: 16 }}>\r\n                    <span>CMD: <span style={{fontFamily: \"Roboto Mono\", color: \"lightblue\"}}>{buffer.commandsReceived}</span></span>\r\n                </div>\r\n                <label htmlFor=\"size\" style={{ paddingRight: 8 }}>LCD-Size:</label>\r\n                <select id=\"size\" onChange={(event) => {\r\n                    const x = event.target.value.split('x').map(v => parseInt(v));\r\n                    setSize([x[0], x[1]]);\r\n                }} value={`${size[0]}x${size[1]}`}>\r\n                    <option value={\"21x8\"}>21x8</option>\r\n                    <option value={\"26x13\"}>26x13</option>\r\n                </select>\r\n                <div>\r\n                    <Button onClick={() => setBuffer(new LCDBuffer(size[1], size[0]))}>Reset Display</Button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"lcd\" style={{ border: \"1px solid black\", position: \"relative\", display: \"inline-block\", backgroundColor: \"#5DFF00\", color: \"black\" }}>\r\n                <div style={{position: \"absolute\", right: 0}}>\r\n                    <span onClick={() => setFontSize(size => Math.min(48, size + 1))}>➕</span>\r\n                    <span onClick={() => setFontSize(size => Math.max(12, size - 1))}>➖</span>\r\n                </div>\r\n                {\r\n                    buffer.getLines().map((line, index) => (\r\n                        <div key={index + line} style={{ lineHeight: 1, letterSpacing: \"0.3em\", fontFamily: \"VT323\", fontSize: fontSize, whiteSpace: \"pre\" }}>{line}</div>\r\n                    ))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n});","//@ts-nocheck\nimport { useEffect, useState, useRef } from 'react';\nimport { CommandParser } from './CommandParser';\nimport { DebugCommands } from './DebugCommands';\nimport { LCD } from './LCD';\nimport \"./App.css\";\nimport Button from 'react-bootstrap/Button';\nimport { Navbar, Container, Jumbotron, Modal } from 'react-bootstrap';\n\nfunction App() {\n  const [serial, setSerial] = useState();\n  const [serialPort, setSerialPort] = useState();\n  const [debugCommands, setDebugCommands] = useState([]);\n  //const [commands, setCommands] = useState([]);\n  const [connected, setConnected] = useState(false);\n  const lcdRef = useRef();\n\n  const readerRef = useRef();\n  const writerRef = useRef();\n\n  useEffect(() => {\n    if (navigator.serial) {\n      setSerial(navigator.serial);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!serialPort) return;\n\n    openSerialPort(serialPort);\n\n    return () => { }\n  }, [serialPort]);\n\n  const handleCOMPortSelection = async () => {\n    try {\n      const serialPort = await serial.requestPort();\n      const deviceInfo = serialPort.getInfo();\n      if (deviceInfo.usbProductId !== 24597 && deviceInfo.usbVendorId !== 1027) {\n        alert(\"This device is not supported!\");\n        return;\n      }\n      setConnected(true);\n      setSerialPort(serialPort);\n    } catch (error) {\n      setConnected(false);\n    }\n  }\n\n  const openSerialPort = async (serialPort) => {\n    try {\n      await serialPort.open({ baudRate: 460800, parity: \"none\", stopBits: 1, dataBits: 8, flowControl: \"none\" });\n      while (serialPort.readable && serialPort.writable) {\n        const commandParser = new CommandParser();\n        const reader = await serialPort.readable.getReader();\n        const writer = await serialPort.writable.getWriter();\n\n        readerRef.current = reader;\n        writerRef.current = writer;\n\n        commandParser.onNewCommand = (command) => {\n          const [buffer, setBuffer] = lcdRef.current;\n          if (command.type === \"DebugNumberCommand\" || command.type === \"DebugTextCommand\") {\n            setDebugCommands(state => state.concat([command]));\n          }\n          if (command.type === \"DisplayCharCommand\") {\n            setBuffer(buffer.insertText(command.text));\n          }\n          if (command.type === \"DisplayTextCommand\") {\n            setBuffer(buffer.insertTextAt(command.text, command.row, command.column));\n          }\n          if (command.type === \"DisplaySetCursorCommand\") {\n            setBuffer(buffer.setCursor(command.row, command.column));\n          }\n          if (command.type === \"DisplayClearCommand\") {\n            setBuffer(buffer.clearLines());\n          }\n          //setCommands(commands => commands.concat([command]));\n        };\n\n        const ack = new Uint8Array([7]);\n\n        try {\n          while (true) {\n            const { value, done } = await reader.read();\n            if (done) {\n              reader.releaseLock();\n              writer.releaseLock();\n              break;\n            }\n            if (value) {\n              commandParser.parseValue(value);\n              writer.write(ack);\n            }\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container>\n          <Navbar.Brand>\n            LCD-Simulator\n          </Navbar.Brand>\n        </Container>\n      </Navbar>\n      <Jumbotron fluid style={{ flex: \"1 1 auto\" }}>\n        <Container>\n          {\n            connected ? (\n              <>\n                <LCD ref={lcdRef} />\n                <DebugCommands clear={() => setDebugCommands([])} commands={debugCommands} />\n              </>\n            ) : (\n              <>\n                <h1>No device connected!</h1>\n                <p>\n                  Please connect to a device by pressing the \"Open COM Port\" button.\n                </p>\n                <Button variant=\"primary\" onClick={handleCOMPortSelection}>Open COM Port</Button>\n              </>\n            )\n          }\n        </Container>\n      </Jumbotron>\n      {\n        navigator.serial === undefined ? (\n          <Modal show={true} backdrop=\"static\">\n            <Modal.Header>\n              <Modal.Title>\n                Your browser is not supported!\n              </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              To use this app you need to install a chrome (v89+), opera (v76+) or edge (v89+) browser.\n            </Modal.Body>\n          </Modal>\n        ) : null\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}